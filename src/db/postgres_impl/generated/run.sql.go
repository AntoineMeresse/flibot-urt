// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: run.sql

package postgres_genererated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRun = `-- name: CreateRun :exec
INSERT INTO runs (guid, utj, mapname, way, runtime, checkpoints, run_date, demopath)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateRunParams struct {
	Guid        string
	Utj         string
	Mapname     string
	Way         string
	Runtime     int32
	Checkpoints string
	RunDate     pgtype.Timestamp
	Demopath    string
}

func (q *Queries) CreateRun(ctx context.Context, arg CreateRunParams) error {
	_, err := q.db.Exec(ctx, createRun,
		arg.Guid,
		arg.Utj,
		arg.Mapname,
		arg.Way,
		arg.Runtime,
		arg.Checkpoints,
		arg.RunDate,
		arg.Demopath,
	)
	return err
}

const getRuntimeByMapWayUTJ = `-- name: GetRuntimeByMapWayUTJ :one
SELECT runtime
FROM runs
WHERE mapname = $1 AND way = $2 AND utj = $3
ORDER BY runtime ASC
LIMIT 1
`

type GetRuntimeByMapWayUTJParams struct {
	Mapname string
	Way     string
	Utj     string
}

func (q *Queries) GetRuntimeByMapWayUTJ(ctx context.Context, arg GetRuntimeByMapWayUTJParams) (int32, error) {
	row := q.db.QueryRow(ctx, getRuntimeByMapWayUTJ, arg.Mapname, arg.Way, arg.Utj)
	var runtime int32
	err := row.Scan(&runtime)
	return runtime, err
}

const updateRunByGuidAndUTJ = `-- name: UpdateRunByGuidAndUTJ :exec
UPDATE runs
SET runtime = $1,
    checkpoints = $2,
    run_date = $3
WHERE guid = $4 AND utj = $5
`

type UpdateRunByGuidAndUTJParams struct {
	Runtime     int32
	Checkpoints string
	RunDate     pgtype.Timestamp
	Guid        string
	Utj         string
}

func (q *Queries) UpdateRunByGuidAndUTJ(ctx context.Context, arg UpdateRunByGuidAndUTJParams) error {
	_, err := q.db.Exec(ctx, updateRunByGuidAndUTJ,
		arg.Runtime,
		arg.Checkpoints,
		arg.RunDate,
		arg.Guid,
		arg.Utj,
	)
	return err
}
