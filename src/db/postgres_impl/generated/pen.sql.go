// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pen.sql

package postgres_genererated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPen = `-- name: CreatePen :one
INSERT INTO pen (guid, date, size)
VALUES ($1, $2, $3)
RETURNING id, guid, date, size
`

type CreatePenParams struct {
	Guid string
	Date pgtype.Timestamp
	Size float64
}

func (q *Queries) CreatePen(ctx context.Context, arg CreatePenParams) (Pen, error) {
	row := q.db.QueryRow(ctx, createPen, arg.Guid, arg.Date, arg.Size)
	var i Pen
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Date,
		&i.Size,
	)
	return i, err
}

const getPenByDate = `-- name: GetPenByDate :many
SELECT id, guid, date, size FROM pen
WHERE date = $1
ORDER BY id
LIMIT $2
`

type GetPenByDateParams struct {
	Date  pgtype.Timestamp
	Limit int32
}

func (q *Queries) GetPenByDate(ctx context.Context, arg GetPenByDateParams) ([]Pen, error) {
	rows, err := q.db.Query(ctx, getPenByDate, arg.Date, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pen
	for rows.Next() {
		var i Pen
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.Date,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPensOrderBySizeAsc = `-- name: GetPensOrderBySizeAsc :many
SELECT id, guid, date, size FROM pen
ORDER BY size ASC
LIMIT $1
`

func (q *Queries) GetPensOrderBySizeAsc(ctx context.Context, limit int32) ([]Pen, error) {
	rows, err := q.db.Query(ctx, getPensOrderBySizeAsc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pen
	for rows.Next() {
		var i Pen
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.Date,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPensOrderBySizeDesc = `-- name: GetPensOrderBySizeDesc :many
SELECT id, guid, date, size FROM pen
ORDER BY size DESC
LIMIT $1
`

func (q *Queries) GetPensOrderBySizeDesc(ctx context.Context, limit int32) ([]Pen, error) {
	rows, err := q.db.Query(ctx, getPensOrderBySizeDesc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pen
	for rows.Next() {
		var i Pen
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.Date,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
