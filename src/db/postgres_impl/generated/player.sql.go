// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: player.sql

package postgres_genererated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO player (guid, role, name, ip_address, time_joined, aliases)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, guid, role, name, ip_address, time_joined, aliases
`

type CreatePlayerParams struct {
	Guid       string
	Role       int32
	Name       string
	IpAddress  string
	TimeJoined pgtype.Timestamp
	Aliases    string
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer,
		arg.Guid,
		arg.Role,
		arg.Name,
		arg.IpAddress,
		arg.TimeJoined,
		arg.Aliases,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Role,
		&i.Name,
		&i.IpAddress,
		&i.TimeJoined,
		&i.Aliases,
	)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM player
WHERE guid = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, guid string) error {
	_, err := q.db.Exec(ctx, deletePlayer, guid)
	return err
}

const getPLayerByGuid = `-- name: GetPLayerByGuid :one
SELECT id, guid, role, name, ip_address, time_joined, aliases FROM player
WHERE guid = $1 LIMIT 1
`

func (q *Queries) GetPLayerByGuid(ctx context.Context, guid string) (Player, error) {
	row := q.db.QueryRow(ctx, getPLayerByGuid, guid)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Role,
		&i.Name,
		&i.IpAddress,
		&i.TimeJoined,
		&i.Aliases,
	)
	return i, err
}

const listPlayers = `-- name: ListPlayers :many
SELECT id, guid, role, name, ip_address, time_joined, aliases FROM player
ORDER BY id
`

func (q *Queries) ListPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, listPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.Role,
			&i.Name,
			&i.IpAddress,
			&i.TimeJoined,
			&i.Aliases,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :one
UPDATE player
SET role = $2,
    name = $3,
    ip_address = $4,
    time_joined = $5,
    aliases = $6
WHERE guid = $1
RETURNING id, guid, role, name, ip_address, time_joined, aliases
`

type UpdatePlayerParams struct {
	Guid       string
	Role       int32
	Name       string
	IpAddress  string
	TimeJoined pgtype.Timestamp
	Aliases    string
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayer,
		arg.Guid,
		arg.Role,
		arg.Name,
		arg.IpAddress,
		arg.TimeJoined,
		arg.Aliases,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Role,
		&i.Name,
		&i.IpAddress,
		&i.TimeJoined,
		&i.Aliases,
	)
	return i, err
}
